{"version":3,"file":"static/js/425.9a85fdc9.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/index.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/contactItem.module.css?65f5","components/ContactItem/index.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/contactList.module.css?ddc0","components/ContactList/index.jsx","components/Notification/index.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/filter.module.css?e01c","components/Filter/index.jsx","components/Box.jsx","pages/Contacts.js"],"sourcesContent":["export const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectNewContactLoading = state => state.contacts.isLoadingNewContact;","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"contactForm_contactForm__f4X+T\",\"contactForm__input\":\"contactForm_contactForm__input__4cv2w\",\"contactForm__btn\":\"contactForm_contactForm__btn__mR+PI\",\"contactForm__label\":\"contactForm_contactForm__label__OOrTm\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts, selectNewContactLoading} from 'redux/contacts/selectors';\nimport styles from './contactForm.module.css';\n\nexport default function ContactForm() {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    const isLoading = useSelector(selectNewContactLoading);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const form = e.target;\n        const { name, number } = form.elements;\n        const isContactInList = contacts.some(contact =>\n            contact.name.toLowerCase() === name.value.toLowerCase());\n        \n        if (isContactInList) {\n            name.focus();\n            return (Notify.info(`${name.value} is already in contacts`))\n        } else {\n            dispatch(addContact({\n                name: name.value,\n                number: number.value,\n            }));\n        };\n\n        form.reset();\n        name.focus();\n    };\n\n    return (\n        <form className={styles.contactForm} name=\"phoneBook\" onSubmit={handleSubmit}>\n            <label>\n                Name\n                <input\n                    autoFocus=\"autofocus\"\n                    className={styles.contactForm__input}\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </label>\n            <label>\n                Phone\n                <input\n                    className={styles.contactForm__input}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n            </label>\n            <button\n                className={styles.contactForm__btn}\n                type=\"submit\">\n                {isLoading ? (\n                    \"Loading...\"\n                ) : (\n                    \"Add contact\"\n                )}\n            </button>\n        </form>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactList__item\":\"contactItem_contactList__item__Ezu8+\",\"contactList__name\":\"contactItem_contactList__name__tOpho\",\"contactList__number\":\"contactItem_contactList__number__4+egX\",\"contactList__btn\":\"contactItem_contactList__btn__UftMw\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport styles from './contactItem.module.css';\n\nexport default function ContactItem({ contact }) {\n    const { name, number, id } = contact;\n    const dispatch = useDispatch();\n\n    const handleDelete = () => dispatch(deleteContact(id))\n    \n    return (\n        <li className={styles.contactList__item}>\n            <p className={styles.contactList__name}>{name}:</p>\n            <p className={styles.contactList__number}>{number}</p>\n            <button\n                className={styles.contactList__btn}\n                type=\"button\"\n            onClick={handleDelete}\n            >\n                Delete\n            </button>\n        </li>\n    );\n};\n\nContactItem.propTypes = {\n    contact: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n        id: PropTypes.string.isRequired,\n    }).isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"contactList_contactList__rfM1N\"};","import { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport ContactItem from \"components/ContactItem\";\nimport styles from './contactList.module.css';\n\nexport default function ContactList() {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    const filteredContacts = contacts\n        .filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()));\n\n    return (\n        <ul className={styles.contactList}>\n            {filteredContacts.map(contact => {\n                return <ContactItem\n                    key={contact.id}\n                    contact={contact}\n                />\n            })}\n        </ul>\n    );\n};","import PropTypes from 'prop-types';\n\nexport default function Notification({message}) {\n    return <p>{message}</p>\n};\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"filter_filter__HJEMj\",\"label\":\"filter_label__nHxuJ\"};","import { useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport styles from './filter.module.css';\n\nexport default function Filter() {\n    const dispatch = useDispatch();\n\n    const handleFilterChange = e => {\n        dispatch(selectFilter(e.target.value));\n    };\n\n    return (\n        <label>\n            Find contacts by name\n            <input\n                className={styles.filter}\n                type=\"text\"\n                onChange={handleFilterChange}\n            />\n        </label>\n    );\n};","import styled from 'styled-components';\nimport { color, typography, space } from 'styled-system';\n\nexport const Box = styled('div')(\n    color,\n    typography,\n    space,\n);","import { selectContacts } from 'redux/contacts/selectors';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Notification from 'components/Notification';\nimport Filter from 'components/Filter';\nimport { Box } from 'components/Box';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logOut } from 'redux/auth/operations';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n\n    return (\n        <Box textAlign='center'>\n            <button type='button' onClick={() => dispatch(logOut())}>Logout</button>\n            <h1>Phonebook</h1>\n\n            <ContactForm />\n            <h2>Contacts</h2>\n            {contacts.length === 0\n                ? (<Notification message={'Phonebook is empty. You can add a new contact.'} />)\n                : <>\n                    <Filter />\n                    <ContactList />\n                </>}\n        </Box>\n    );\n};\n"],"names":["selectFilter","state","contacts","filter","selectContacts","items","selectNewContactLoading","isLoadingNewContact","ContactForm","dispatch","useDispatch","useSelector","isLoading","className","styles","name","onSubmit","e","preventDefault","form","target","elements","number","some","contact","toLowerCase","value","focus","Notify","addContact","reset","autoFocus","type","pattern","title","required","ContactItem","id","onClick","deleteContact","ContactList","filteredContacts","includes","map","Notification","message","Filter","onChange","Box","styled","color","typography","space","Contacts","useEffect","fetchContacts","textAlign","logOut","length"],"sourceRoot":""}